{"name":"Mapillary","tagline":"Mapillary: Python API","body":"# Mapillary: Python API\r\n\r\n***\r\n\r\nA big thanks to the guys at [@Mapillary] for publishing many great [Python tools for Mapillary].\r\n\r\n## Install\r\n\r\nLatest version from **Github Repo**\r\n\r\n```bash\r\n$ git clone https://github.com/DenisCarriere/mapillary.git\r\n$ cd mapillary_tools\r\n$ python setup.py install\r\n```\r\n\r\nStable version from **PyPi**\r\n\r\n```bash\r\n$ pip install mapillary\r\n```\r\n\r\n## Compatibility\r\n\r\nMapillary API is tested on the following Python versions:\r\n\r\n- 2.7\r\n\r\n## Geotag Photos\r\n\r\nThis process will add GPS information to all photos inside a folder correlated from a GPX Track.\r\n\r\n**WARNING** This will overwrite any existing GPS EXIF to the existing files \r\n\r\n```bash\r\n$ mapillary geotag \"<File Path>\" --gpx \"<GPX File Path>\"\r\n```\r\n\r\n### Bearing Offset\r\n\r\nIf your camera was pointed to the right (90 Degrees), you can include a `bearing` offset to correct the **GPSImageDirection**\r\n\r\n```bash\r\n$ mapillary geotag \"<File Path>\" --gpx \"<GPX File Path>\" --bearing 90\r\n```\r\n\r\n### Time Offset\r\n\r\nIf the **Timestamp** of your GPS and camera are not in sync, you can include a `time` offset (Seconds) to adjust the **GPSDateTime**.\r\n\r\n```bash\r\n$ mapillary geotag \"<File Path>\" --gpx \"<GPX File Path>\" --time 2\r\n```\r\n\r\n### Successful GeoTag\r\n\r\nA typical output for a successful Geotag process\r\n\r\n```bash\r\n$ mapillary geotag \"100GOPRO\" -g \"GoPro 4.gpx\"\r\nSaving file: 100GOPRO/G0018624.JPG\r\nSaving file: 100GOPRO/G0028783.JPG\r\nSaving file: 100GOPRO/G0018600.JPG\r\nSaving file: 100GOPRO/G0028752.JPG\r\n...\r\n```\r\n\r\n\r\n## Manual Uploads\r\n\r\nThe Standard manual upload method requires your Mapillary credential\r\n\r\n```bash\r\n$ mapillary upload \"<File Path>\" -u \"<Username>\" \\\r\n-e \"<your@email.com>\" -p \"<Password>\"\r\n```\r\n\r\n### Using Environment Variables\r\n\r\nUsing environment variables you can send your Mapillary credentials safely.\r\n\r\n1. Connect the the following URL for to retrieve the **Hashes**.\r\n\r\n http://api.mapillary.com/v1/u/uploadhashes\r\n\r\n2. Export env variables `MAPILLARY_PERMISSION_HASH` & `MAPILLARY_SIGNATURE_HASH`, you can edit `~/.bashrc` to store them to your terminal.\r\n\r\n3. Use the Mapillary `upload` command with your `Username`.\r\n\r\n```bash\r\n$ export $MAPILLARY_PERMISSION_HASH=<permission_hash>\r\n$ export $MAPILLARY_SIGNATURE_HASH=<signature_hash>\r\n$ mapillary upload \"<File Path>\" -u \"<Username>\"\r\n```\r\n\r\n### Successful Upload\r\n\r\nA typical successful upload will look like the following:\r\n\r\n```bash\r\n$ mapillary upload \"GoPro\" -u \"deniscarriere\"\r\n\r\n[SUCCESS] Mapillary connection established.\r\nUploading sequence 3e41e334-3a50-4e41-8206-dae2a4d24e5a.\r\nUploading: G0047731.JPG\r\nUploading: G0047747.JPG\r\n Uploading: G0047736.JPG\r\nUploading: G0047742.JPG\r\nSuccess: G0047736.JPG\r\n...\r\nSuccess: G0047768.JPG\r\nSuccess: G0047751.JPG\r\n===\r\nFinalizing upload will submit all successful uploads and ignore all failed.\r\nIf all files were marked as successful, everything is fine, just press 'y'.\r\nFinalize upload? [y/n]: y\r\nUpload a DONE file to tell the backend that the sequence \r\nis all uploaded and ready to submit.\r\nUploading: DONE\r\nSuccess: DONE\r\nDone uploading.\r\n```\r\n\r\n## Command Line Interface\r\n\r\n```bash\r\n$ mapillary -h\r\n```\r\n\r\n|    Parameter       |     Description      |\r\n|:-------------------|:---------------------|\r\n| `command`          | Mapillary API        |\r\n| `input`            | Input: File Path     |\r\n| `-o`, `--out`      | Output: File Path    |\r\n| `-e`, `--email`    | Mapillary: Email     |\r\n| `-u`, `--username` | Mapillary: Username  |\r\n| `-p`, `--password` | Mapillary: Password  |\r\n| `-g`, `--gpx`      | GPX Track: File Path |\r\n| `-b`, `--bearing`  | GPX: Bearing offset  |\r\n| `-t`, `--time`     | GPX: Time offset     |\r\n| `-h`, `--help`     | Help File            |\r\n\r\n[Python tools for Mapillary]: https://github.com/mapillary/mapillary_tools/tree/master/python\r\n[@Mapillary]: https://twitter.com/mapillary","google":"UA-59485624-1","note":"Don't delete this file! It's used internally to help with page regeneration."}